{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"All categories","text":"","link":"/categories/index.html"},{"title":"All tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"collections.namedtuple","text":"1. namedtuple이란명칭 그대로 index(idx)로만 값(value)에 접근 가능한 기본 튜플(basic Tuple)과는 다르게 키(key)값으로 접근이 가능하도록 제공한다. 키(namedtuple에서는 field_names)를 가지고 값에 접근이 가능한 점이 딕셔너리(dict)타입과 비슷하다 할 수 있다. namedtuple()에 대한 자세한 내용은 docs.python.org 에서 확인할 수 있다. namedtuple()은 collections.namedtuple(typename, field_names, verbose=False, rename=False)을 입력값으로 받으며, field_names 를 통해 namedtuple()의 키 즉, 필드명(fieldname)을 정의할 수 있다. 필드명을 정의할 때에는 필드사이에 빈칸(whitespace)이나 ‘,’ 로 구분 해준다. 예를들어 필드명 x 와 y 를 지정할 경우 ‘x y’ 나 ‘x, y’와 같이 입력해야한다. 다른방법으로는 [‘x’, ‘y’]와 같이 리스트(list)형식으로 필드명을 지정해줄 수 있다. 1.1. tuple vs namedtuple12345678910111213141516from collections import namedtuplePoint = namedtuple('Point', 'x, y')pt1 = Point(10, 20)pt2 = Point(20, 40)tp1 = (10, 20)tp2 = (20, 40)print(pt1, pt2)print(pt1.x, pt1.y)print(tp1, tp2)print(tp1[0], tp1[1]) 위의 소스를 실행시켜 보면, 접근 방식의 차이가 분명하다. 차이점 namedtuple 의 경우엔 딕셔너리와 같은 형태로 내부 값에 접근 tuple 의 경우엔 인덱스 요소 접근 방식으로 내부 값에 접근 2. namedtuple 함수2.1. _make()12345678from collections import namedtuplePoint = namedtuple('Point', 'x, y')location = [1, 5]pt3 = Point._make(location)print(pt3) 정의된 namedtuple 객체를 이용하여, _make() 함수를 활용한 객체 생성도 가능하다. 2.2. _replace()12345678from collections import namedtuplePoint = namedtuple('Point', 'x, y')location = [1, 5]pt3 = Point._make(location)print(pt3._replace(x=100)) 튜플은 기본적으로 내부 요소의 값의 변경이 불가능하지만, 기존에 가지고 있던 요소별 값 중 일부를 변경하여 새로운 객체로 변환이 가능하게 도와주는 함수라 볼 수 있다. 2.3. _fields123456789from collections import namedtuplePoint = namedtuple('Point', 'x, y')print(Point._fields)Color = namedtuple('Color', 'red green blue')Pixel = namedtuple('Pixel', Point._fields + Color._fields)print(Pixel(11, 22, 128, 255, 0)) namedtuple 로 정의된 객체의 필드를 확인할 수 있는 _fields 이다. 2.4. _fields_defaults1234567891011from collections import namedtupleAccount = namedtuple('Account', ['type', 'balance'], defaults=[123456,999])print(Account._fields_defaults)account = Account()print(account)account = Account('premium')print(account) 2.5. rename12345678from collections import namedtuple# 실행 시 에러 발생use_built_in_keyword = namedtuple('Account', ['type', 'balance', 'class'])use_built_in_keyword = namedtuple('use_built_in_keyword', ['type', 'balance', 'class'], rename=True)print(use_built_in_keyword('a', 'b', 'c')) namedtuple 을 이용하여, 객체 생성시 정의된 내부 키워드 ‘class’ 와 같은 명칭을 사용할 경우 에러가 발생한다. (default: rename=False)명칭을 사용할 때에는, 정의된 키워드를 피하는 것을 추천하나 굳이 사용해야하는 경우 rename=True 를 써준다면 내부적으로 해당 명칭을 변경시켜주어 충돌을 피할 수 있다.","link":"/2019/01/12/collections-namedtuple/"},{"title":"C# 데이터 자료형","text":"현재 진행 중인 프로젝트안에서 Byte 단위로 데이터를 핸들링하는 작업을 하다보니 자료형의 크기와 범위가 정확히 기억이 나지않아 계산에 어려움이 있었다.다시한번 자료형의 크기를 정리하며 상기하는 시간을 가져보자. C# 및 .NET 타입별 메모리의 크기와 표현 범위. ※ 1 Byte = 8 Bit - 고정소수점 자료형 형식 크기(byte) 범위 byte System.byte 1 0 ~ 255 Byte System.Byte 1 0 ~ 255 sbyte System.sbyte 1 -128 ~ 127 sByte System.sByte 1 -128 ~ 127 short System.Int16 2 –32,768 ~ 32,767 Int16 System.Int16 2 –32,768 ~ 32,767 ushort System.UInt16 2 0 ~ 65,535 UInt16 System.UInt16 2 0 ~ 65,535 Int System.Int32 4 –2,147,483,648 ~ 2,147,483,647 Int32 System.Int32 4 –2,147,483,648 ~ 2,147,483,647 uint System.UInt32 4 0 ~ 4,294,967,295 UInt32 System.UInt32 4 0 ~ 4,294,967,295 long System.Int64 8 –9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 Int64 System.Int64 8 –9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 ulong System.UInt64 8 0 ~ 18,446,744,073,709,551,615 UInt64 System.UInt64 8 0 ~ 18,446,744,073,709,551,615 - 부동소수점 자료형 형식 크기(byte) 범위 float System.Single 4 1.5E-45 ~ 3.4E+38(7자리 유효) Single System.Single 4 1.5E-45 ~ 3.4E+38(7자리 유효) double System.Double 8 5.0E-324 ~ 1.7E+308(15자리 유효) Double System.Double 8 5.0E-324 ~ 1.7E+308(15자리 유효) decimal System.Decimal 16 7.9E-28 ~ 7.9E+28(28자리 유효) Decimal System.Decimal 16 7.9E-28 ~ 7.9E+28(28자리 유효) - 문자 및 문자열 자료형 형식 크기(byte) 범위 char System.Char 2 or 4 UTF-16 Char System.Char 2 or 4 UTF-16 string System.String _ UTF-16 String System.String _ UTF-16","link":"/2019/01/15/c-sharp-datatype/"},{"title":"Icarus 테마에 Comment Plugin - discus 추가하기","text":"1. DISQUS 가입하기 다음 링크를 DISQUS 통하여 사이트에 가입합니다. 2. DISQUS Website 추가하기 회원가입 완료 후, 아래 사진 절차를 따라 웹 사이트를 추가합니다. 2.1 I want to install Disqus on my site 다음 버튼을 클릭합니다 2.2 Create a new site Website Name 은 Icarus theme _config.yml 에 연결해줄 명칭으로 사용됩니다. Category 는 자신의 웹사이트 목적에 맞추어 선택합니다. 2.3 What platform is your site on? 자신의 Blog 의 플랫폼을 선택하며, Hexo 의 경우 목록에 없으므로 최하단 버튼을 선택합니다. 3. Discus 연동 코드 적용하기 2번의 절차를 마치고 나면 다음과 같은 창을 확인합니다. ../themes/icarus/layout/disqus.ejs 파일을 오픈합니다. 최초 파일 오픈시 다음과 같은 형태로 작성되어 있습니다. (function() { var d = document, s = d.createElement('script'); s.src = '//' + '' + '.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); 위 사진에서 1번의 소스의 s.src = ‘https://“user-website-name”.disqus.com/embed.js’; 를 복사한 뒤에, 위의 s.src 부분을 대체해줍니다. 4. Icarus _config.yml 수정하기 마지막으로 _config.yml 파일을 수정합니다. ../thiemes/icarus/_config.yml 파일을 열어줍니다. 다음과 같이 config 정보를 수정해주면 연동이 마무리됩니다. comment: # Name of the comment plugin type: disqus shortname: Disqus Website Name","link":"/2019/01/01/add-disqus-icarus-blog/"},{"title":"collections.OrderedDict","text":"1. OrderedDict 란명칭 그대로 삽입 순서가 보장되는 dictionary 형태의 컬렉션이다. 12345678910111213141516171819202122232425from collections import OrderedDictod = OrderedDict.fromkeys('abcde')print(od)&gt;&gt;&gt; OrderedDict([('a', None), ('b', None), ('c', None), ('d', None), ('e', None)])od.move_to_end('c')print(od.keys())&gt;&gt;&gt; odict_keys(['a', 'b', 'd', 'e', 'c'])od.move_to_end('c', last=False)print(od.keys())&gt;&gt;&gt; odict_keys(['c', 'a', 'b', 'd', 'e'])d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}print(OrderedDict(sorted(d.items(), key=lambda t: t[0]))) # Key 를 이용한 정렬&gt;&gt;&gt; OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])print(OrderedDict(sorted(d.items(), key=lambda t: t[1]))) # Value 를 이용한 정렬&gt;&gt;&gt; OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])print(OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))) # Key 값의 길이를 이용한 정렬&gt;&gt;&gt; OrderedDict([('pear', 1), ('apple', 4), ('banana', 3), ('orange', 2)]) 2. dict vs OrderedDict파이썬 3.7 이전 환경에서 아래 소스를 실행할 경우, OrderedDict 는 삽입 순서가 보장되며, Dictionary의 경우는 순서가 Set 연산자와 마찬가지로 보장되지 않는 것을 확인할 수 있다. (삽입순서에 대한 정보가 내부적으로 관리되다보니 OrderedDict 가 dictionary 에 비해 메모리를 두배이상 사용.) 12345678910111213141516from collections import OrderedDictod = OrderedDict()od['c'] = 1od['b'] = 2od['a'] = 3print(od.items())&gt;&gt;&gt; [('c', 1), ('b', 2), ('a', 3)]d = {}d['c'] = 1d['b'] = 2d['a'] = 3print(d.items())&gt;&gt;&gt; [('a', 3), ('c', 1), ('b', 2)] ※ Python 3.7 부터는 dictionary 의 경우에도 삽입 순서가 보장됨.(참조 URL) 3. OrderedDict 활용 사용자가 n 번 만큼 값을 입력하고 출력된 결과가 다음과 같을 때, 삽입순서가 보장되지 않는 파이썬 환경에서 OrderedDict 를 활용해 작성해보자. - Input 9 BANANA FRIES 12 POTATO CHIPS 30 APPLE JUICE 10 CANDY 5 APPLE JUICE 10 CANDY 5 CANDY 5 CANDY 5 POTATO CHIPS 30 - Output BANANA FRIES 12 POTATO CHIPS 60 APPLE JUICE 20 CANDY 20 12345678910111213# Problem Result Coden = int(input())ordered_dictionary = OrderedDict()for _ in range(n): item_name, space, net_price = input().rpartition(' ') # dict.get('key', default) → key 값이 없으면 default 반환 ordered_dictionary[item_name] = ordered_dictionary.get(item_name, 0) + int(net_price)for item_name, net_price in ordered_dictionary.items(): print(item_name, net_price)","link":"/2019/01/15/collections-ordereddict/"},{"title":"Hexo를 이용한 GitHub 블로그 만들기","text":"1. GitHub Repository 만들기 먼저 블로그의 각종 설정과 포스트를 관리할 저장소가 필요합니다.이를 지원해주는 link to GitHub! 에서 새로운 저장소를 만들어보겠습니다. 위의 사진에서 보듯이 Repository name 은 다음과 같은 형식을 준수해서 만들어야 합니다. username.github.io 마지막으로 Public 으로 지정하셔야만 GitHub 에서 호스팅이 가능합니다. 2. Node.js 설치 Windows 사용자 인스톨러 를 이용한 설치 그 외 사용자 패키지 관리자 를 이용한 설치 3. Git 설치 Git 에서 다운로드 받아 PC 에 설치합니다. (Python 과 같은 프로그램을 설치할 시 함께 설치되어 있을 수 있음) 4. Hexo 설치 다음 명령어를 cmd 명령창이나, shell 을 이용하여 설치하세요. $ npm install -g hexo-cli 기타 Hexo 에 관련된 사항은 link to Hexo! 참조하세요. 5. Hexo 시작하기 블로그 파일을 저장할 폴더를 하나 만듭니다.만약 폴더를 지정하지 않을 시에 명령어를 보낸 디렉토리를 기준으로 준비됩니다. $ hexo init [folder] $ cd folder $ npm install Site title: 블로그 제목 subtitle: 블로그 서브 제목 description: 블로그에 대한 부연설명 URL url: http://username.github.io/ Deployment type: git repo: http://github.com/username/username.github.io.git/ 위의 내용을 참고하여 본인의 블로그를 수정합니다. 5.1 Hexo 신규 글 포스팅 다음 명령어를 통해 신규 글을 포스팅 합니다. $ hexo new (title) 5.2 Hexo 배포하기 다음 명령어를 통해 본인의 블로그를 손쉽게 배포할 수 있습니다. $ hexo generate $ hexo deploy -g 또는 $ hexo generate -deploy Reference https://hexo.io/ko/docs https://guides.github.com/features/mastering-markdown/ https://gist.github.com/ihoneymon/652be052a0727ad59601 https://m.blog.naver.com/future_creator/220722153999 https://developers.ascentnet.co.jp/2017/11/16/introduce-hexo/ https://www.w3schools.com/tags","link":"/2018/12/09/create-github-blog-with-hexo/"},{"title":"NoSQL 에 대해 알아보자.","text":"NoSQL 데이터베이스란?NoSQL 데이터베이스는 특정 데이터 모델에 대해 특정 목적에 맞추어 구축되는 데이터베이스로서 현대적인 애플리케이션 구축을 위한 유연한 스키마를 갖추고 있습니다. 장점 개발의 용이성 기능성 및 확장성 다양한 데이터 모델 문서 그래프 Key-Value In-Memory 검색 수십 년간, 애플리케이션 개발을 위해 지배적으로 사용된 데이터 모델은 관계형 데이터 모델로서 Oracle, DB2, SQL Server, MySQL, PostgreSQL 과 같은 관계형 데이터베이스에 의해 사용되었습니다.2000년대 중반에서 말에 이르러서야 다른 데이터 모델들이 채택되고 사용되며, 이러한 새로운 데이터베이스와 데이터 모델들을 차별화하고 분류하기 위해 “NoSQL” 이란 용어가 만들어졌습니다. 흔히 “NoSQL” 이란 용어는 “비관계형”과 같은 의미로 사용됩니다. RDBMS 와의 차이점 Schemaless Join 불가 (reference 등으로 구현) No Transaction 수평확장 용이","link":"/2019/01/13/inquire-nosql/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"collections","slug":"collections","link":"/tags/collections/"},{"name":"C#","slug":"C","link":"/tags/C/"},{"name":"Data Type","slug":"Data-Type","link":"/tags/Data-Type/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"DISQUS","slug":"DISQUS","link":"/tags/DISQUS/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"NoSql","slug":"NoSql","link":"/tags/NoSql/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"Python","slug":"Programming/Python","link":"/categories/Programming/Python/"},{"name":"DB","slug":"DB","link":"/categories/DB/"},{"name":"C#","slug":"Programming/C","link":"/categories/Programming/C/"},{"name":"NoSQL","slug":"DB/NoSQL","link":"/categories/DB/NoSQL/"}]}